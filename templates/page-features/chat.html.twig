{% if user.incomingConsentRequests|length > 0 %}
    <div id="chat-consent-menu">
        <div class="chat-consent-tab">
            <div class="chat-consent-title">
                {{ 'chat.consentRequests'|trans }}
            </div>
        </div>
        <div id="chat-consent-requests" class="chat-consent-requests">
            {% for request in user.incomingConsentRequests %}
                <div id="consentRequest{{ request.id }}" class="chat-recent-user"
                     onclick="openConsentRequest('{{ request.id }}','{{ request.requester.username }}')">
                    <div class="chat-recent-user-profile-picture-container">
                        <img class="chat-recent-user-profile-picture"
                             src="{{ asset('img/' ~ request.requester.image) }}" height="100%" width="100%">
                    </div>
                    <div class="chat-recent-user-username">
                        {{ request.requester.username }}
                    </div>
                    <div class="chat-consent-message">
                        {{ 'chat.previewChanges'|trans }}
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
{% endif %}
<div id="chat-recent-conversations">
    <div class="chat-recent-tab-button" onclick="toggleRecentChats()">
        <div class="chat-recent-title">
            {{ 'chat.recentChats'|trans }}
        </div>
        <span class="chat-recent-arrow"><i id="recentChatsArrow" class="fa fa-angle-up"></i></span>
    </div>
    <div id="chat-recent-menu" class="chat-recent-menu">

    </div>
</div>
<div id="chat-conversation">
    <div id="chat-recipient">

    </div>
    <div id="chat-messages-container">

    </div>
    <div id="chat-bar" class="chat-bar">
        <div id="normal-chat-bar">
            <div title="{{ 'chat.attachToThread'|trans }}" class="chat-bar-attach-button" onclick="startSelectMode()">
                <i class="fa fa-paperclip"></i>
            </div>
            <input placeholder="{{ 'chat.writeAMessage'|trans }}" id="chat-input">
            <div title="{{ 'chat.sendMessage'|trans }}" class="chat-bar-send-button" onclick="sendMessage()">
                <i class="fa fa-angle-right"></i>
            </div>
        </div>
        <div id="select-chat-bar">
            <div class="chat-bar-cancel-button" onclick="stopSelectMode()">
                {{ 'chat.cancel'|trans }}
            </div>
            <div class="chat-bar-preview-button" onclick="createAttachThreadPopUp()">
                {{ 'chat.selectThread'|trans }}
            </div>
        </div>
    </div>
</div>

<script>
    let selectMode = false;
    let currentRecipient = '';
    let activeConversation = 0;
    let uploadedMessages = {};

    const eventSource = new EventSource("{{ mercure('/conversations/' ~ user.username)|escape('js') }}", {withCredentials: true})
    eventSource.onmessage = event => {
        // Will be called every time an update is published by the server
        const message = JSON.parse(event.data)
        console.log(message);
        generateMessage(message);
        updateRecentConversations(message, message.conversation.id)
    };

    async function addConversation(username, image) {
        noRecentChats(false)
        if (document.getElementById('chat-column').style.display === 'none') {
            openChatColumn();
        }
        const data = new FormData;
        addLoadingScreen(document.getElementById('chat-column'));
        data.append('otherUserUsername', username);
        await fetch('{{ path('conversations.newConversation') }}', {method: 'POST', keepalive: true, body: data})
            .then((response) => {
                if (response.status === 200) {
                    response.json()
                        .then((conversation) => {
                            getExistingConversation(conversation.id, username);
                        })
                } else if (response.status === 201) {
                    response.json()
                        .then((conversation) => {
                            createNewConversation(conversation.id, username, image);
                        })
                }

            })
        removeLoadingScreen(document.getElementById('chat-column'));
    }

    function createNewConversation(conversationId, username, image) {
        generateRecentConversation(conversationId, username, image, null, null, true);
        getMessages(conversationId, username);
    }

    function getExistingConversation(conversationId, username) {
        const conversation = document.getElementById('conversation' + conversationId);
        const recentConversations = document.getElementById('chat-recent-menu');
        recentConversations.scrollTop = conversation.offsetTop;
        getMessages(conversationId, username);
    }

    async function getActiveConversation() {
        await fetch('{{ path('getActiveConversation') }}', {method: 'GET', keepalive: true})
            .then((response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    response.json()
                        .then(async (conversation) => {
                            await getMessages(conversation.conversation, conversation.recipient)
                        })
                }
            })
    }

    document.getElementById('chat-input').addEventListener("keypress", function (event) {
        if (event.key === "Enter") {
            sendMessage();
        }
    });

    window.addEventListener('load', onLoad, false);

    async function onLoad() {
        addLoadingScreen(document.getElementById('chat-column'));
        await prepareChat();

        {% if not app.session.get('recents') %}
        openRecentChats();
        {% endif %}
        openRecentChats();
        openRecentChats();
        removeLoadingScreen(document.getElementById('chat-column'));
    }

    window.addEventListener('beforeunload', () => {
        eventSource.close();
    })

    async function prepareChat() {
        await getRecentConversations();
        return await getActiveConversation();
    }

    function chatScrollToBottom() {
        const chat = document.getElementById('chat-messages-container');
        chat.scrollTop = chat.scrollHeight;
    }

    function resizeChat() {
        let consent, chatWarning, recents;
        const messagesContainer = document.getElementById('chat-messages-container');
        if (document.getElementById('chat-consent-menu')) {
            consent = document.getElementById('chat-consent-menu').offsetHeight;
        } else {
            consent = 0;
        }
        if (document.getElementById('chat-recent-conversations')) {
            recents = document.getElementById('chat-recent-conversations').offsetHeight;
        } else {
            recents = 0;
        }
        if (document.getElementById('chat-warning')) {
            chatWarning = document.getElementById('chat-warning').offsetHeight;
        } else {
            chatWarning = 0;
        }

        const chatBar = document.getElementById('chat-bar');
        const chatRecipient = document.getElementById('chat-recipient');

        messagesContainer.style.height = (window.innerHeight -
            consent -
            recents -
            chatWarning -
            chatBar.offsetHeight -
            chatRecipient.offsetHeight).toString() + "px";


        const chatContainer = document.getElementById('chat-conversation');
        chatContainer.style.height = (chatRecipient.offsetHeight +
            messagesContainer.offsetHeight + chatBar.offsetHeight).toString() + 'px';
    }

    async function getRecentConversations() {
        await fetch('{{ path('conversations.getConversations') }}')
            .then((response) => response.json())
            .then(async (result) => {
                console.log('res:', result);
                if (result.length === 0) {
                    noRecentChats(true);
                    document.getElementById('chat-recent-conversations').style.display = 'none';
                } else {
                    for (const conversation of result) {
                        console.log(conversation);
                        await generateRecentConversation(conversation.conversationId, conversation.username,
                            conversation.image, conversation.content, conversation.createdAt);
                    }
                }
            })
    }

    async function generateRecentConversation(id, username, image, content, createdAt, first = false) {
        const user = document.createElement('div');
        user.className = "chat-recent-user";
        user.id = 'conversation' + id;
        user.onclick = function () {
            getMessages(id, username);
        };

        const profilePictureContainer = document.createElement('div');
        profilePictureContainer.className = "chat-recent-user-profile-picture-container";

        const profilePicture = document.createElement('img');
        profilePicture.src = "{{ asset('img/') }}" + image;
        profilePicture.alt = image;
        profilePicture.className = 'chat-recent-user-profile-picture';

        profilePictureContainer.appendChild(profilePicture);
        user.appendChild(profilePictureContainer);

        const usernameDiv = document.createElement('div');
        usernameDiv.className = "chat-recent-user-username";
        usernameDiv.innerHTML = username;
        user.appendChild(usernameDiv);

        const time = document.createElement('div');
        time.className = "chat-recent-user-time";

        const message = document.createElement('div');
        message.className = "chat-most-recent-message";

        if (content !== null) {
            if (content.length > 40) {
                message.innerHTML = content.slice(0, 35) + '...';
            } else {
                message.innerHTML = content;
            }
            time.innerHTML = createdAt;
        }

        user.appendChild(time);
        user.appendChild(message);

        const recents = document.getElementById('chat-recent-menu');

        if (first && recents.children.length > 0) {
            recents.insertBefore(user, recents.firstChild)
        } else {
            recents.appendChild(user);
        }
    }

    async function getMessages(conversationId, user) {
        if (activeConversation !== conversationId) {
            console.log('ac:' + activeConversation + ' cId:' + conversationId)

            addLoadingScreen(document.getElementById('chat-conversation'));
            removeChatWarning();

            if (activeConversation !== 0) {
                const oldConversation = document.getElementById('conversation' + activeConversation);
                oldConversation.className = 'chat-recent-user';
            }

            activeConversation = conversationId;
            currentRecipient = user;

            const newConversation = document.getElementById('conversation' + conversationId);
            newConversation.className = 'chat-recent-user active';
            const data = new FormData
            data.append('conversationId', conversationId);
            data.append('recipient', user);
            fetch("{{ path('setActiveConversation') }}", {method: 'POST', keepalive: true, body: data})

            let url = '{{ path("messages.getMessages", {id: 'convId'}) }}';
            let chatWarning = true, atLeastOneMessage = false;

            url = url.replace("convId", conversationId);
            await fetch(url, {method: 'GET', keepalive: true})
                .then((response) => response.json())
                .then((messages) => {
                    if (messages.length > 0) {
                        atLeastOneMessage = true;
                    }
                    document.getElementById('chat-recipient').innerText = user;
                    document.getElementById('chat-messages-container').innerHTML = '';
                    document.getElementById('chat-conversation').style.display = 'block';
                    console.log(messages);
                    for (const message of messages) {
                        const messageIsNotMine = generateMessage(message);
                        chatWarning = messageIsNotMine && chatWarning;
                    }
                })

            {% if user.chatWarning %}
                if (chatWarning && atLeastOneMessage) {
                    generateChatWarning();
                }
            {% endif %}
            resizeChat();
            chatScrollToBottom()
            removeLoadingScreen(document.getElementById('chat-conversation'));
        }
    }

    function removeChatWarning() {
        const chatWarning = document.getElementById('chat-warning')
        if (chatWarning) {
            document.getElementById('chat-conversation').removeChild(chatWarning);
        }
    }

    function generateMessage(message) {
        let messageIsNotMine = true;

        const container = document.createElement('div');
        container.id = 'message' + message.id;
        container.className = 'chat-message'

        const bubble = document.createElement('div');
        bubble.id = 'bubble' + message.id;
        bubble.innerHTML = '<i class="fa fa-check"></i>';
        bubble.onclick = function () {
            selectMessage(message.id);
        }

        const content = document.createElement('div');
        content.innerHTML = message.content;
        content.onclick = function () {
            selectMessage(message.id);
        }

        const time = document.createElement('div');
        time.innerHTML = message.createdAt;

        if (message.mine) {
            bubble.className = 'chat-message-select-bubble me';
            content.className = 'chat-message-content me';
            time.className = 'chat-message-time me';
            messageIsNotMine = false;
        } else {
            bubble.className = 'chat-message-select-bubble other';
            content.className = 'chat-message-content other';
            time.className = 'chat-message-time other';
        }

        container.appendChild(bubble);
        container.appendChild(content);
        container.appendChild(time);

        document.getElementById('chat-messages-container').appendChild(container);
        chatScrollToBottom();

        return messageIsNotMine;
    }

    function generateChatWarning() {
        const container = document.createElement('div');
        container.className = 'chat-warning-container';
        container.id = 'chat-warning';

        const i = document.createElement('i');
        i.className = 'fa fa-remove';

        const x = document.createElement('div');
        x.className = 'chat-warning-x';
        x.appendChild(i);
        x.onclick = function () {
            document.getElementById('chat-conversation').removeChild(container);
        }

        container.innerHTML = "{{ 'chat.chatWarning'|trans }}";
        container.appendChild(x);

        document.getElementById('chat-conversation').insertBefore(container, document.getElementById('chat-messages-container'));
    }

    function sendMessage() {
        const input = document.getElementById('chat-input');
        let url = '{{ path("messages.createMessage", {id: 'convId'}) }}';
        url = url.replace("convId", activeConversation);
        const messageDiv = createPendingMessage(input.value);
        const data = new FormData;
        data.append('content', input.value)
        input.value = '';

        fetch(url, {method: 'POST', keepalive: true, body: data})
            .then((response) => response.json())
            .then((message) => {
                confirmPendingMessage(messageDiv, message);
                updateRecentConversations(message, activeConversation);
                resizeChat();
                chatScrollToBottom();
            })
    }

    function updateRecentConversations(message, conversationId) {
        const conversation = document.getElementById('conversation' + conversationId);
        const messageContent = conversation.getElementsByClassName('chat-most-recent-message');
        if (message.content.length > 40) {
            messageContent[0].innerHTML = message.content.slice(0, 35) + '...';
        } else {
            messageContent[0].innerHTML = message.content;
        }

        const messageTime = conversation.getElementsByClassName('chat-recent-user-time');
        messageTime[0].innerHTML = message.createdAt;

        const recentConversations = document.getElementById('chat-recent-menu');
        recentConversations.removeChild(conversation);
        recentConversations.insertBefore(conversation, recentConversations.firstChild);
        recentConversations.scrollTop = 0;
    }

    function createPendingMessage(messageContent) {
        const container = document.createElement('div');
        container.className = 'chat-message'

        const content = document.createElement('div');
        content.innerHTML = messageContent;
        content.className = 'chat-message-content-pending';

        container.appendChild(content);

        document.getElementById('chat-messages-container').appendChild(container);

        resizeChat();
        chatScrollToBottom();

        return container;
    }

    function confirmPendingMessage(messageDiv, message) {
        messageDiv.id = 'message' + message.id;

        const content = messageDiv.firstChild;
        content.className = 'chat-message-content me'
        content.onclick = function () {
            selectMessage(message.id);
        }

        const bubble = document.createElement('div');
        bubble.id = 'bubble' + message.id;
        bubble.innerHTML = '<i class="fa fa-check"></i>';
        bubble.className = 'chat-message-select-bubble me';
        bubble.onclick = function () {
            selectMessage(message.id);
        }

        const time = document.createElement('div');
        time.className = 'chat-message-time me';
        time.innerHTML = message.createdAt;

        messageDiv.insertBefore(bubble, content);
        messageDiv.appendChild(time);
    }

    function toggleRecentChats() {
        openRecentChats()
        fetch('{{ path('setRecents') }}', {keepalive: true, method: 'POST'})
    }

    function openRecentChats() {
        console.log('chats');
        const menu = document.getElementById('chat-recent-conversations');
        const recents = document.getElementById('chat-recent-menu');
        const arrow = document.getElementById('recentChatsArrow');
        if (recents.style.display === 'none') {
            recents.style.display = 'block';
            arrow.className = 'fa fa-angle-up';
            menu.style.height = (recents.scrollHeight + 40).toString() + "px";
            recents.style.height = '';
            recents.style.height = (menu.offsetHeight - 40).toString() + "px";
        } else {
            recents.style.display = 'none';
            arrow.className = 'fa fa-angle-down';
            menu.style.height = "40px";
        }

        resizeChat();
    }

    function startSelectMode() {
        selectMode = true;
        const bubbles = document.querySelectorAll('.chat-message-select-bubble');
        uploadedMessages = {};
        bubbles.forEach(bubble => bubble.style.display = 'block');
        setSelectChatBar();
    }

    function stopSelectMode() {
        selectMode = false;
        uploadedMessages = {};
        const bubbles = document.querySelectorAll('.chat-message-select-bubble');
        bubbles.forEach(bubble => {
                bubble.style.display = 'none';
                if (bubble.className.includes('selected')) {
                    bubble.className = bubble.className.slice(0, -9);
                }
            }
        )
        setNormalChatBar();
    }

    function setSelectChatBar() {
        document.getElementById('normal-chat-bar').style.display = 'none';
        document.getElementById('select-chat-bar').style.display = 'block';
    }

    function setNormalChatBar() {
        document.getElementById('select-chat-bar').style.display = 'none';
        document.getElementById('normal-chat-bar').style.display = 'block';
    }

    function selectMessage(messageId) {
        if (selectMode) {
            console.log('called');
            const bubble = document.getElementById('bubble' + messageId);
            if (bubble.className.includes('selected')) {
                delete uploadedMessages[messageId];
                bubble.className = bubble.className.slice(0, -9);
            } else {
                const message = document.getElementById('message' + messageId);
                uploadedMessages[messageId] = {
                    content: message.children[1].innerHTML,
                    mine: !bubble.className.includes('other'),
                }
                bubble.className += ' selected';
            }
            console.log(uploadedMessages);
        }
    }

    function createPopUp(title, instructions, withCheckbox = false) {
        const darkScreen = document.createElement('div');
        darkScreen.className = 'dark-screen';
        darkScreen.id = 'popUp';

        const popUp = document.createElement('div');
        popUp.className = 'pop-up';

        const popUpTitle = document.createElement('div');
        popUpTitle.className = 'pop-up-title';
        popUpTitle.id = 'popUpTitle';
        popUpTitle.innerHTML = title;

        const popUpInstructions = document.createElement('div');
        popUpInstructions.className = 'pop-up-instructions';
        popUpInstructions.id = 'popUpInstructions';
        popUpInstructions.innerHTML = instructions;

        const popUpContent = document.createElement('div');
        popUpContent.id = 'popUpContent';
        popUpContent.className = 'pop-up-content';

        const popUpButtons = document.createElement('div');
        popUpButtons.className = 'pop-up-buttons';
        popUpButtons.id = 'pop-up-buttons';

        if (withCheckbox) {
            const checkboxDiv = document.createElement('div');
            checkboxDiv.className = 'pop-up-anonymous-checkbox';
            checkboxDiv.id = 'popUpCheckbox';


            const label = document.createElement('label');
            label.innerText = '{{ 'chat.remainAnonymous'|trans }}';
            label.className = 'pop-up-anonymous-checkbox-label';
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.id = 'anonymousCheckBox';

            checkboxDiv.appendChild(checkbox);
            checkboxDiv.appendChild(label);

            popUpButtons.appendChild(checkboxDiv);
        }

        const cancelButton = document.createElement('div');
        cancelButton.className = 'chat-bar-cancel-button';
        cancelButton.innerHTML = '{{ 'chat.cancel'|trans }}';
        cancelButton.onclick = function () {
            closePopUp();
        }

        popUpButtons.appendChild(cancelButton);

        popUp.appendChild(popUpTitle);
        popUp.appendChild(popUpInstructions);
        popUp.appendChild(popUpContent);
        popUp.appendChild(popUpButtons);

        darkScreen.appendChild(popUp);

        document.body.appendChild(darkScreen);
    }

    async function createAttachThreadPopUp() {
        createPopUp('{{ 'chat.selectThread'|trans }}', '{{ 'chat.selectThreadInstructions'|trans }}');

        const popUpContent = document.getElementById('popUpContent');

        addLoadingScreen(popUpContent);

        await fetch('{{ path('getChatThreads') }}', {method: 'GET', keepalive: true})
            .then((response) => response.json())
            .then((data) => {
                console.log(data);
                for (const thread of data) {
                    addThreadToPopUp(thread);
                }
                removeLoadingScreen(popUpContent);
            })
    }

    function addThreadToPopUp(thread) {
        const container = document.createElement('div');
        container.id = 'chatThread' + thread.id;
        container.className = 'pop-up-thread-container';
        container.onclick = function () {
            selectThread(thread.id);
        }

        const title = document.createElement('div');
        title.className = 'pop-up-thread-title';
        title.innerHTML = thread.title;
        container.appendChild(title);

        const uploadDate = document.createElement('div');
        uploadDate.className = 'pop-up-thread-upload-date';
        uploadDate.innerHTML = thread.uploadDate;
        container.appendChild(uploadDate);

        const tags = document.createElement('div');
        tags.className = 'pop-up-thread-tags';
        container.appendChild(tags);

        for (const tag of thread.tags) {
            const tagDiv = document.createElement('div');
            tagDiv.className = 'pop-up-thread-tag';
            tagDiv.innerHTML = tag;

            tags.appendChild(tagDiv);
        }

        const popUp = document.getElementById('popUpContent');
        popUp.appendChild(container)
    }


    function selectThread(threadId) {
        const popUp = document.getElementById('popUpContent');
        popUp.innerHTML = '';
        addLoadingScreen(popUp);
        const consentButton = document.createElement('div');
        consentButton.className = 'chat-bar-preview-button';
        consentButton.innerHTML = '{{ 'chat.askForConsent'|trans }}'
        consentButton.onclick = function () {
            askForConsent(threadId);
        }

        document.getElementById('pop-up-buttons').appendChild(consentButton);
        document.getElementById('popUpTitle').innerHTML = '{{ 'chat.previewThread'|trans }}';
        document.getElementById('popUpInstructions').innerHTML = '{{ 'chat.previewThreadInstructions'|trans }} ' + currentRecipient;

        const data = new FormData;
        data.append('threadId', threadId);
        fetch('{{ path('getThreadPreview') }}', {method: 'POST', keepalive: true, body: data})
            .then((response) => response.json())
            .then(async (thread) => {
                await displayThread(thread, uploadedMessages, currentRecipient);
                removeLoadingScreen();
            });
    }

    async function displayThread(thread, messages, recipient) {
        console.log(thread);
        const popUpContent = document.getElementById('popUpContent');
        let content = `
        <div class="view-thread-container">
            <div class="view-thread-title">` + thread.title;
        if (thread.closed) {
            content +=
                `<span class="view-thread-closed">
                        <i title="{{ 'viewThread.threadClosed'|trans }}" class="fa fa-check"></i>
                    </span>`
        }
        content += `
            </div>
            <div class="view-thread-author">
                {{ 'viewThread.author'|trans }}:` + thread.author + `
            </div>
            <div class="view-thread-uploaded-on">
                {{ 'viewThread.uploadedOn'|trans }} ` + thread.uploadDate + `
            </div>
            <div class="view-thread-content">`;

        let conversationsExist = false;
        for (const contentBit of thread.content) {
            if (!(contentBit instanceof Object)) {
                console.log(contentBit);
                content += `<div class="view-thread-content-bit">`;
                if (contentBit.slice(0, 4) === 'txt:') {
                    content += contentBit.slice(4);
                } else if (contentBit.slice(0, 4) === 'img:') {
                    content += `<img src="{{ asset('img/') }}` + contentBit.slice(4) + `" alt="` + contentBit.slice(4) + `">`;
                }
                content += `</div>`;
            } else {
                conversationsExist = true;
            }
        }

        content += `</div></div><div class="view-thread-container">
            <div class="view-thread-title">
            {{ 'viewThread.conversations'|trans }}
            </div>
            <div class="view-thread-content">`;

        if (conversationsExist) {
            for (const contentBit of thread.content) {
                if (contentBit instanceof Object) {
                    console.log('bit', contentBit);
                    content += `<div class="view-thread-conversation-with">{{ 'chat.conversationWith'|trans }} `;
                    if (contentBit['helper']) {
                        content += `<a class="view-thread-conversation-helper"><span class="view-thread-conversation-helper">` + contentBit['helper'] + `</span></a></div>`;
                    } else {
                        content += `<a><span class="view-thread-anonymous">{{ 'chat.anonymous'|trans }}</span></a></div>`
                    }
                    content += `<div class="view-thread-conversation-container">`;
                    for (const message of contentBit['messages']) {
                        content += `<div class="chat-message"><div class="chat-message-content `;
                        if (message.slice(0,3) === 'me:') {
                            content += 'me';
                        } else {
                            content += 'other';
                        }
                        content += `">` + message.slice(3,undefined) + `</div></div>`;
                    }
                    content += `</div>`;
                }
            }
        }

        content += `<div class="view-thread-conversation-with">{{ 'chat.conversationWith'|trans }} `;
        if (document.getElementById('anonymousCheckBox')) {
            content +=`<a><span id="threadHelper" class="view-thread-conversation-helper">` + recipient + `</span></a></div>`;
        } else {
            content += `<a><span class="view-thread-conversation-helper">` + recipient + `</span></a>
            <span class="view-thread-anonymous">/{{ 'chat.anonymous'|trans }} ({{ 'chat.dependingOn'|trans }} ` + recipient + `)</span></div>`;
        }

        content += `<div class="view-thread-conversation-container">`;
        for (const message of Object.values(messages)) {
            content += `<div class="chat-message">
                <div class="chat-message-content`;

            if (message.mine) {
                content += ` me">`
            } else {
                content += ` other">`
            }

            content += message.content;
            content += `</div></div>`
        }

        content += `</div></div></div>`;
        popUpContent.innerHTML = content;
    }

    function closePopUp() {
        const popUp = document.getElementById('popUp');
        document.body.removeChild(popUp);
    }

    function askForConsent(threadId) {
        const data = new FormData;
        data.append('messages', JSON.stringify(Object.keys(uploadedMessages)));
        data.append('recipient', currentRecipient);
        data.append('threadId', threadId);
        fetch('{{ path('consentRequests.create') }}', {method: 'POST', keepalive: true, body: data})
            .then((response) => {
                console.log(response);
            })

        closePopUp();
        stopSelectMode();
        console.log(uploadedMessages, currentRecipient);
    }

    async function openConsentRequest(requestId, requester) {
        createPopUp('{{ 'chat.consentRequest'|trans }}', requester + ' {{ 'chat.consentRequestInstructions'|trans }}', true);

        const popUpContent = document.getElementById('popUpContent');

        addLoadingScreen(popUpContent);


        let url = '{{ path('consentRequests.getRequest', {requestId: 'requestId'}) }}';
        url = url.replace('requestId', requestId);

        await fetch(url, {method: 'GET'})
            .then((response) => response.json())
            .then((consentRequest) => {
                console.log(consentRequest)
                const popUpButtons = document.getElementById('pop-up-buttons');

                const acceptButton = document.createElement('div');
                acceptButton.className = 'chat-bar-consent-button accept';
                acceptButton.innerText = '{{ 'chat.accept'|trans }}';
                acceptButton.onclick = function () {
                    acceptConsentRequest(requestId);
                }

                const declineButton = document.createElement('div');
                declineButton.className = 'chat-bar-consent-button decline';
                declineButton.innerText = '{{ 'chat.decline'|trans }}'
                declineButton.onclick = function () {
                    declineConsentRequest(requestId);
                }

                const checkbox = document.getElementById('anonymousCheckBox');
                checkbox.onclick = function () {
                    const helper = document.getElementById('threadHelper');
                    if (checkbox.checked) {
                        helper.innerText = '{{ 'chat.anonymous'|trans }}';
                        helper.className = "view-thread-anonymous";
                    } else {
                        helper.innerText = consentRequest.recipient;
                        helper.className = "view-thread-conversation-helper";
                    }
                }

                popUpButtons.appendChild(acceptButton);
                popUpButtons.appendChild(declineButton);

                displayThread(consentRequest.thread, consentRequest.conversation, consentRequest.recipient);
            })
    }

    function acceptConsentRequest(requestId) {
        const data = new FormData;
        data.append('id', requestId);
        data.append('anonymous', document.getElementById('anonymousCheckBox').checked);
        fetch('{{ path('consentRequests.accept') }}', { method: 'POST', keepalive: true, body: data })
            .then((response) => response.text())
            .then((data) => {console.log(data)})
        removeConsentRequest(requestId);
        closePopUp();
    }

    function declineConsentRequest(requestId) {
        const data = new FormData;
        data.append('id', requestId);
        fetch('{{ path('consentRequests.decline') }}', { method: 'POST', keepalive: true, body: data });
        removeConsentRequest(requestId);
        closePopUp();
    }

    function removeConsentRequest(requestId) {
        const consentRequest = document.getElementById('consentRequest'+ requestId);
        document.getElementById('chat-consent-requests').removeChild(consentRequest);
        if (document.getElementById('chat-consent-requests').children.length === 0) {
            document.getElementById('chat-column-content').removeChild(document.getElementById('chat-consent-menu'));
        }
    }

    function noRecentChats(noRecents) {
        if (noRecents) {
            document.getElementById('chat-recent-conversations').style.display = 'none';
            const noChats = document.createElement('div');
            noChats.id = 'noChats'
            noChats.className = 'no-chats';
            noChats.innerHTML = '{{ 'chat.noChats'|trans }}';
            document.getElementById('chat-column-content').appendChild(noChats);
        } else {
            if (document.getElementById('noChats')) {
                document.getElementById('chat-column-content').removeChild(document.getElementById('noChats'));
                document.getElementById('chat-recent-conversations').style.display = 'block';
            }
        }
    }

    function addLoadingScreen(parent) {
        if (!(!!document.getElementById('loading-cover'))) {
            const parentCover = document.createElement('div');
            parentCover.className = 'loading-cover';
            parentCover.id = 'loading-cover';

            const image = document.createElement('img');
            image.src = '{{ asset('css/sprites/JustRock.png') }}';
            image.className = 'loading-image';

            parentCover.appendChild(image);

            if (parent.children.length > 0) {
                parent.insertBefore(parentCover, parent.firstChild)
            } else {
                parent.appendChild(parentCover);
            }

            parentCover.height = parent.offsetHeight + 'px';
        }
    }

    function removeLoadingScreen(parent) {
        try {
            const loading = document.getElementById('loading-cover');
            parent.removeChild(loading);
        } catch (e) {
        }
    }
</script>