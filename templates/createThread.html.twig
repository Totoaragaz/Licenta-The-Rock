{% extends 'page.html.twig' %}

{% block title %}{{ 'title.createThread'|trans }}{% endblock %}

{% set active='forum' %}

{% block content %}
    <div class="create-thread-bottom-white-space">
        <div class="create-thread-container">
            <div class="create-thread-title">
                {{ 'createThread.createThreadTitle'|trans }}
            </div>
            {{ form_start(createThreadForm) }}
            <div class="create-thread-label">
                {{ 'createThread.threadTitle'|trans }}
                <span id="title-bubble" class="create-thread-bubble"> <i class="fa fa-remove"></i></span>
            </div>
            <div class="create-thread-instructions">
                {{ 'createThread.titleInstructions'|trans }}
            </div>
            {{ form_widget(createThreadForm.title) }}
            <div class="create-thread-label">
                {{ 'createThread.threadContent'|trans }}
                <span id="content-bubble" class="create-thread-bubble"> <i class="fa fa-remove"></i></span>
            </div>
            <div class="create-thread-instructions">
                {{ 'createThread.contentInstructions'|trans }}
            </div>
            {{ form_widget(createThreadForm.content) }}
            <div class="create-thread-label">
                {{ 'createThread.threadTags'|trans }}
                <span id="tags-bubble" class="create-thread-bubble"> <i class="fa fa-remove"></i></span>
            </div>
            <div class="create-thread-instructions">
                {{ 'createThread.tagsInstructions'|trans }}
            </div>
            {{ form_widget(createThreadForm.tags) }}
            <div id="create-thread-buttons" class="create-thread-bottom-bar">
                <div id="disabledButton" class="create-thread-save-button-disabled">
                    {{ 'createThread.createThread'|trans }}
                </div>
                {{ form_row(createThreadForm.submit) }}
                {{ form_row(createThreadForm.images) }}
            </div>
            {{ form_end(createThreadForm) }}
        </div>
    </div>

    <script>
        const content = document.getElementById("create_thread_form_content");
        const submitButton = document.getElementById("create_thread_form_submit");
        const disabledButton = document.getElementById("disabledButton");
        const title = document.getElementById('create_thread_form_title');
        const tags = document.getElementById('create_thread_form_tags');
        const bottomButtons = document.getElementById('create-thread-buttons');
        title.addEventListener('change', validateForm);
        tags.addEventListener('change', validateForm);
        addTextArea();

        function destroySubmitButton() {
            bottomButtons.removeChild(submitButton.parentNode);
        }

        function lockSubmitButton() {
            bottomButtons.removeChild(submitButton);
            bottomButtons.insertBefore(disabledButton, bottomButtons.firstChild);
        }

        function unlockSubmitButton() {
            bottomButtons.removeChild(disabledButton);
            bottomButtons.insertBefore(submitButton, bottomButtons.firstChild);
        }

        function validateForm() {
            if (titleValid() && tagsValid() && contentValid()) {
                try {
                    unlockSubmitButton();
                } catch (e){}
            } else {
                try {
                    lockSubmitButton();
                } catch (e){}
            }
        }

        function titleValid() {
            const bubble = document.getElementById('title-bubble');
            if (title.value.length >= 5 && title.value.length <= 100) {
                bubble.style.backgroundColor = 'green';
                bubble.innerHTML = ' <i class="fa fa-check"></i>';

                return true;
            } else {
                bubble.style.backgroundColor = 'red';
                bubble.innerHTML = ' <i class="fa fa-remove"></i>';

                return false;
            }
        }

        function tagsValid() {
            const specialCharacters = /`!@#$%^&*()_+\-=\[\]{};':"\\|.<>\/?~/;
            const bubble = document.getElementById('tags-bubble');
            if (tags.value.length >= 3 && !specialCharacters.test(tags.value)) {
                bubble.style.backgroundColor = 'green';
                bubble.innerHTML = ' <i class="fa fa-check"></i>';

                return true;
            } else {
                bubble.style.backgroundColor = 'red';
                bubble.innerHTML = ' <i class="fa fa-remove"></i>';

                return false;
            }
        }

        function contentValid () {
            let characters = 0;
            for (let i = 0; i < content.dataset.index; i++) {
                const textarea = document.getElementById("create_thread_form_content_" + i);
                characters += textarea.value.length;
            }
            const bubble = document.getElementById('content-bubble');
            if (characters > 20) {
                bubble.style.backgroundColor = 'green';
                bubble.innerHTML = ' <i class="fa fa-check"></i>';

                return true;
            } else {
                bubble.style.backgroundColor = 'red';
                bubble.innerHTML = ' <i class="fa fa-remove"></i>';

                return false;
            }
        }

        destroySubmitButton();

        const inputElement = document.getElementById("{{ createThreadForm.images.vars.id }}");
        inputElement.addEventListener("change", addImages, false);
        let imagesArray = [];

        content.addEventListener('click', function (e) {
            if (e.target.className !== 'create-thread-content-text') {
                const children = content.children;
                const textarea = children.item(children.length - 1).children.item(0).children.item(0);
                textarea.setSelectionRange(textarea.value.length, textarea.value.length);
                textarea.focus();
            }
        }, false);

        window.addEventListener('unload', function () {
            fetch('{{ path('removeAllImages') }}', {method: 'POST', keepalive: true})
        });

        function addImages() {
            const files = inputElement.files;
            for (let i = 0; i < files.length; i++) {
                let file = files.item(i);
                for (let j = 0; j < 5; j++) {
                    if (typeof imagesArray[j] == 'undefined') {
                        imagesArray[j] = file;
                        displayImage(j);
                        uploadImage(j);
                        addTextArea();
                        break;
                    }
                }
            }
        }

        function uploadImage(number) {
            const data = new FormData;
            data.append('image' + number, imagesArray[number]);
            data.append('number', number);
            fetch('{{ path('uploadImage') }}', {method: 'POST', keepalive: true, body: data});
        }

        function displayImage(number) {
            const div = document.createElement('div');
            div.className = 'create-thread-content-image-container';

            const img = document.createElement("img");
            img.setAttribute("src", URL.createObjectURL(imagesArray[number]));
            div.id = 'image' + number;
            img.className = 'create-thread-content-image';
            div.appendChild(img);

            const button = document.createElement('div');
            button.innerText = '{{ 'createThread.deleteImage'|trans }}';
            button.className = 'create-thread-content-image-delete'
            button.onclick = function () {
                deleteImage(number);
            }
            div.appendChild(button);
            content.appendChild(div);
        }

        function addTextArea() {
            const textArea = document.createElement("div");
            textArea.innerHTML = content.dataset.prototype.replace(/__name__/g, content.dataset.index);
            textArea.children[0].className = 'thread-textarea';
            content.appendChild(textArea);
            content.dataset.index++;
        }

        const tx = document.getElementsByTagName("textarea");
        for (let i = 0; i < tx.length; i++) {
            tx[i].setAttribute("style", "height:" + (tx[i].scrollHeight) + "px;overflow-y:hidden;");
            tx[i].addEventListener("input", OnInput, false);
        }

        function OnInput() {
            this.style.height = (this.scrollHeight) + "px";
        }

        function deleteImage(number) {
            content.removeChild(document.getElementById('image' + number));
            imagesArray[number] = undefined;
            const data = new FormData;
            data.append('number', number);
            fetch('{{ path('removeImage') }}', {method: 'POST', keepalive: true, body: data});
        }
    </script>
{% endblock %}